{"version":3,"sources":["../../../../assets/core/assets/core/BoardManager.js"],"names":["cc","Class","extends","Component","properties","chessPiecePrefab","Prefab","topSideHolder","Node","bottomSideHolder","onLoad","node","on","initBoard","onChessSelect","onChessUnselect","redColor","Color","RED","blueColor","BLUE","config","CHESS_LAYOUT","CHESS_INFO","CHESS_SIZE","chessPieces","chessIndex","length","chessName","chessPiece","instantiate","parent","sprite","color","init","position","_getPosition","setPosition","push","pawnIndex","rotation","botSide","stepX","stepY","isPawn","isReverse","STEP","BORDER_LEFT_BOARD","BORDER_TOP_BOARD","BORDER_BOTTOM_BOARD","xPosition","yPosition","v2","Ï","event","stopPropagation","target","selectedChess","emit","targetChess"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,0BAAkBL,GAAGM,MADb;AAERC,uBAAeP,GAAGQ,IAFV;AAGRC,0BAAkBT,GAAGQ;AAHb,KAHP;;AASLE,UATK,oBASI;AACL,aAAKC,IAAL,CAAUC,EAAV,CAAa,YAAb,EAA2B,KAAKC,SAAhC,EAA2C,IAA3C;AACA,aAAKF,IAAL,CAAUC,EAAV,CAAa,cAAb,EAA6B,KAAKE,aAAlC,EAAiD,IAAjD;AACA,aAAKH,IAAL,CAAUC,EAAV,CAAa,gBAAb,EAA+B,KAAKG,eAApC,EAAqD,IAArD;;AAEA,aAAKC,QAAL,GAAgBhB,GAAGiB,KAAH,CAASC,GAAzB;AACA,aAAKC,SAAL,GAAiBnB,GAAGiB,KAAH,CAASG,IAA1B;AACH,KAhBI;AAkBLP,aAlBK,uBAkBO;AAAA,2BACyC,KAAKF,IAAL,CAAUU,MADnD;AAAA,YACAC,YADA,gBACAA,YADA;AAAA,YACcC,UADd,gBACcA,UADd;AAAA,YAC0BC,UAD1B,gBAC0BA,UAD1B;;AAER,aAAKC,WAAL,GAAmB,EAAnB;;AAEA;AACA,aAAK,IAAIC,aAAa,CAAtB,EAAyBA,aAAaJ,aAAaK,MAAnD,EAA2DD,YAA3D,EAAyE;AACrE,gBAAME,YAAYN,aAAaI,UAAb,CAAlB;AACA,gBAAMG,aAAa7B,GAAG8B,WAAH,CAAe,KAAKzB,gBAApB,CAAnB;AACAwB,uBAAWE,MAAX,GAAoB,KAAKtB,gBAAzB;AACAoB,uBAAWG,MAAX,CAAkBC,KAAlB,GAA0B,KAAKjB,QAA/B;AACAa,uBAAWK,IAAX,CAAgBX,WAAWK,SAAX,CAAhB,EAAuCA,SAAvC,EAAkDJ,UAAlD;AACA,gBAAIW,iBAAJ;AACA,gBAAIT,aAAa,CAAjB,EAAoB;AAChBS,2BAAW,KAAKC,YAAL,CAAkBb,WAAWK,SAAX,CAAlB,EAAyC,IAAzC,EAA+C,IAA/C,CAAX;AACH,aAFD,MAEO;AACHO,2BAAW,KAAKC,YAAL,CAAkBb,WAAWK,SAAX,CAAlB,EAAyC,IAAzC,CAAX;AACH;AACDC,uBAAWQ,WAAX,CAAuBF,QAAvB;AACA,iBAAKV,WAAL,CAAiBa,IAAjB,CAAsBT,UAAtB;AACH;;AAED,aAAKU,SAAL,GAAiB,CAAjB;;AAEA;AACA,aAAK,IAAIb,cAAa,CAAtB,EAAyBA,cAAaJ,aAAaK,MAAnD,EAA2DD,aAA3D,EAAyE;AACrE,gBAAME,aAAYN,aAAaI,WAAb,CAAlB;AACA,gBAAMG,cAAa7B,GAAG8B,WAAH,CAAe,KAAKzB,gBAApB,CAAnB;AACAwB,wBAAWE,MAAX,GAAoB,KAAKxB,aAAzB;AACAsB,wBAAWG,MAAX,CAAkBC,KAAlB,GAA0B,KAAKd,SAA/B;AACAU,wBAAWW,QAAX,GAAsB,GAAtB;AACAX,wBAAWK,IAAX,CAAgBX,WAAWK,UAAX,CAAhB,EAAuCA,UAAvC,EAAkDJ,UAAlD;AACA,gBAAIW,kBAAJ;AACA,gBAAIT,cAAa,CAAjB,EAAoB;AAChBS,4BAAW,KAAKC,YAAL,CAAkBb,WAAWK,UAAX,CAAlB,EAAyC,KAAzC,EAAgD,IAAhD,CAAX;AACH,aAFD,MAEO;AACHO,4BAAW,KAAKC,YAAL,CAAkBb,WAAWK,UAAX,CAAlB,EAAyC,KAAzC,CAAX;AACH;AACDC,wBAAWQ,WAAX,CAAuBF,SAAvB;AACA,iBAAKV,WAAL,CAAiBa,IAAjB,CAAsBT,WAAtB;AACH;AACJ,KA1DI;AA4DLO,gBA5DK,8BA4DkDK,OA5DlD,EA4D8E;AAAA,8BAApEC,KAAoE;AAAA,YAApEA,KAAoE,8BAA5D,CAA4D;AAAA,8BAAzDC,KAAyD;AAAA,YAAzDA,KAAyD,8BAAjD,CAAiD;AAAA,+BAA9CC,MAA8C;AAAA,YAA9CA,MAA8C,+BAArC,KAAqC;AAAA,YAAnBC,SAAmB,uEAAP,KAAO;AAAA,4BACJ,KAAKlC,IAAL,CAAUU,MADN;AAAA,YACvEyB,IADuE,iBACvEA,IADuE;AAAA,YACjEC,iBADiE,iBACjEA,iBADiE;AAAA,YAC9CC,gBAD8C,iBAC9CA,gBAD8C;AAAA,YAC5BC,mBAD4B,iBAC5BA,mBAD4B;;AAE/E,YAAIR,OAAJ,EAAa;AACT,gBAAIG,MAAJ,EAAY;AACR,oBAAI,CAAC,KAAKL,SAAV,EAAqB,KAAKA,SAAL,GAAiB,CAAjB;AACrB,oBAAMW,aAAYH,oBAAoB,KAAKR,SAAL,GAAiBO,IAAjB,GAAwB,CAA9D;AACA,oBAAMK,aAAYF,sBAAsBN,QAAQG,IAAhD;AACA,qBAAKP,SAAL;AACA,uBAAO,IAAIvC,GAAGoD,EAAP,CAAUF,UAAV,EAAqBC,UAArB,CAAP,CAAwCE;AAC3C;;AAED,gBAAMH,YAAY,IAAIR,QAAQI,IAA9B;AACA,gBAAMK,YAAYF,sBAAsBN,QAAQG,IAAhD;AACA,gBAAID,SAAJ,EAAe;AACX,uBAAO,IAAI7C,GAAGoD,EAAP,CAAU,CAACF,SAAX,EAAsBC,SAAtB,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAInD,GAAGoD,EAAP,CAAUF,SAAV,EAAqBC,SAArB,CAAP;AACH;AACJ,SAhBD,MAgBO;AACH,gBAAIP,MAAJ,EAAY;AACR,oBAAI,CAAC,KAAKL,SAAV,EAAqB,KAAKA,SAAL,GAAiB,CAAjB;AACrB,oBAAMW,cAAYH,oBAAoB,KAAKR,SAAL,GAAiBO,IAAjB,GAAwB,CAA9D;AACA,oBAAMK,cAAYH,mBAAmBL,QAAQG,IAA7C;AACA,qBAAKP,SAAL;AACA,uBAAO,IAAIvC,GAAGoD,EAAP,CAAUF,WAAV,EAAqBC,WAArB,CAAP,CAAwCE;AAC3C;;AAED,gBAAMH,cAAY,IAAIR,QAAQI,IAA9B;AACA,gBAAMK,cAAYH,mBAAmBL,QAAQG,IAA7C;AACA,gBAAID,SAAJ,EAAe;AACX,uBAAO,IAAI7C,GAAGoD,EAAP,CAAU,CAACF,WAAX,EAAsBC,WAAtB,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAInD,GAAGoD,EAAP,CAAUF,WAAV,EAAqBC,WAArB,CAAP;AACH;AACJ;AACJ,KA/FI;AAiGLrC,iBAjGK,yBAiGSwC,KAjGT,EAiGgB;AACjBA,cAAMC,eAAN;AACA,YAAID,MAAME,MAAN,KAAiB,KAAKC,aAAtB,IAAuCH,MAAME,MAAN,KAAiB,IAA5D,EAAkE;AAC9D,iBAAKC,aAAL,CAAmBC,IAAnB,CAAwB,OAAxB;AACA,iBAAKD,aAAL,GAAqB,IAArB;AACA;AACH;;AAED,YAAI,CAAC,KAAKA,aAAV,EAAyB;AACrB,iBAAKA,aAAL,GAAqBH,MAAME,MAA3B;AACA;AACH;;AAED,YAAI,CAAC,KAAKG,WAAV,EAAuB;AACnB,iBAAKA,WAAL,GAAmBL,MAAME,MAAzB;AAEH;AACJ,KAlHI;AAoHLzC,mBApHK,2BAoHWuC,KApHX,EAoHkB;AACnBA,cAAMC,eAAN;AACA,aAAKE,aAAL,GAAqB,IAArB;AACH;AAvHI,CAAT","file":"BoardManager.js","sourceRoot":"../../../../assets/core","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        chessPiecePrefab: cc.Prefab,\n        topSideHolder: cc.Node,\n        bottomSideHolder: cc.Node,\n    },\n\n    onLoad() {\n        this.node.on('INIT_BOARD', this.initBoard, this);\n        this.node.on('CHESS_SELECT', this.onChessSelect, this);\n        this.node.on('CHESS_UNSELECT', this.onChessUnselect, this);\n\n        this.redColor = cc.Color.RED;\n        this.blueColor = cc.Color.BLUE;\n    },\n\n    initBoard() {\n        const { CHESS_LAYOUT, CHESS_INFO, CHESS_SIZE } = this.node.config;\n        this.chessPieces = [];\n\n        //init for the bottom side\n        for (let chessIndex = 0; chessIndex < CHESS_LAYOUT.length; chessIndex++) {\n            const chessName = CHESS_LAYOUT[chessIndex];\n            const chessPiece = cc.instantiate(this.chessPiecePrefab);\n            chessPiece.parent = this.bottomSideHolder;\n            chessPiece.sprite.color = this.redColor;\n            chessPiece.init(CHESS_INFO[chessName], chessName, CHESS_SIZE);\n            let position;\n            if (chessIndex > 5) {\n                position = this._getPosition(CHESS_INFO[chessName], true, true);\n            } else {\n                position = this._getPosition(CHESS_INFO[chessName], true);\n            }\n            chessPiece.setPosition(position);\n            this.chessPieces.push(chessPiece);\n        }\n\n        this.pawnIndex = 0;\n\n        //init for the top side\n        for (let chessIndex = 0; chessIndex < CHESS_LAYOUT.length; chessIndex++) {\n            const chessName = CHESS_LAYOUT[chessIndex];\n            const chessPiece = cc.instantiate(this.chessPiecePrefab);\n            chessPiece.parent = this.topSideHolder;\n            chessPiece.sprite.color = this.blueColor;\n            chessPiece.rotation = 180;\n            chessPiece.init(CHESS_INFO[chessName], chessName, CHESS_SIZE);\n            let position;\n            if (chessIndex > 5) {\n                position = this._getPosition(CHESS_INFO[chessName], false, true);\n            } else {\n                position = this._getPosition(CHESS_INFO[chessName], false);\n            }\n            chessPiece.setPosition(position);\n            this.chessPieces.push(chessPiece);\n        }\n    },\n\n    _getPosition({ stepX = 0, stepY = 0, isPawn = false }, botSide, isReverse = false) {\n        const { STEP, BORDER_LEFT_BOARD, BORDER_TOP_BOARD, BORDER_BOTTOM_BOARD } = this.node.config;\n        if (botSide) {\n            if (isPawn) {\n                if (!this.pawnIndex) this.pawnIndex = 0;\n                const xPosition = BORDER_LEFT_BOARD + this.pawnIndex * STEP * 2;\n                const yPosition = BORDER_BOTTOM_BOARD + stepY * STEP;\n                this.pawnIndex++;\n                return new cc.v2(xPosition, yPosition); Ï\n            }\n\n            const xPosition = 0 + stepX * STEP;\n            const yPosition = BORDER_BOTTOM_BOARD + stepY * STEP;\n            if (isReverse) {\n                return new cc.v2(-xPosition, yPosition);\n            } else {\n                return new cc.v2(xPosition, yPosition);\n            }\n        } else {\n            if (isPawn) {\n                if (!this.pawnIndex) this.pawnIndex = 0;\n                const xPosition = BORDER_LEFT_BOARD + this.pawnIndex * STEP * 2;\n                const yPosition = BORDER_TOP_BOARD - stepY * STEP;\n                this.pawnIndex++;\n                return new cc.v2(xPosition, yPosition); Ï\n            }\n\n            const xPosition = 0 + stepX * STEP;\n            const yPosition = BORDER_TOP_BOARD - stepY * STEP;\n            if (isReverse) {\n                return new cc.v2(-xPosition, yPosition);\n            } else {\n                return new cc.v2(xPosition, yPosition);\n            }\n        }\n    },\n\n    onChessSelect(event) {\n        event.stopPropagation();\n        if (event.target === this.selectedChess && event.target !== null) {\n            this.selectedChess.emit('RESET');\n            this.selectedChess = null;\n            return;\n        }\n\n        if (!this.selectedChess) {\n            this.selectedChess = event.target;\n            return;\n        }\n\n        if (!this.targetChess) {\n            this.targetChess = event.target;\n            \n        }\n    },\n\n    onChessUnselect(event) {\n        event.stopPropagation();\n        this.selectedChess = null;\n    },\n});\n"]}